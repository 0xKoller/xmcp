name: Publish to NPM

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages
        run: pnpm turbo build --filter=xmcp --filter=create-xmcp-app --filter=init-xmcp

      - name: Verify build outputs
        run: |
          # Verify xmcp package build
          cd packages/xmcp
          if [ ! -f "dist/index.js" ] || [ ! -f "dist/index.d.ts" ] || [ ! -f "dist/cli.js" ]; then
            echo "❌ xmcp package build verification failed"
            exit 1
          fi
          echo "✅ xmcp package build verified"

          # Verify create-xmcp-app CLI build
          cd ../create-xmcp-app
          if [ ! -f "index.js" ]; then
            echo "❌ create-xmcp-app CLI build verification failed"
            exit 1
          fi
          echo "✅ create-xmcp-app CLI build verified"

          # Verify init-xmcp CLI build
          cd ../init-xmcp
          if [ ! -f "dist/index.js" ]; then
            echo "❌ init-xmcp CLI build verification failed"
            exit 1
          fi
          echo "✅ init-xmcp CLI build verified"

      - name: Extract version from release tag
        id: version
        run: |
          # Extract version from tag (assumes tags like v1.0.0 or 1.0.0)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v} # Remove 'v' prefix if present
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Determine npm tag
        id: npm_tag
        run: |
          if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
            # Extract pre-release tag from version (e.g., 1.0.0-beta.1 -> beta)
            VERSION="${{ steps.version.outputs.version }}"
            if [[ $VERSION =~ -([a-zA-Z]+) ]]; then
              TAG="${BASH_REMATCH[1]}"
            else
              TAG="prerelease"
            fi
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "Pre-release detected, using npm tag: $TAG"
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "Stable release detected, using npm tag: latest"
          fi

      - name: Update package versions
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Update xmcp package version
          cd packages/xmcp
          npm version "$VERSION" --no-git-tag-version
          echo "✅ Updated xmcp version to $VERSION"

          # Update create-xmcp-app package version
          cd ../create-xmcp-app
          npm version "$VERSION" --no-git-tag-version
          echo "✅ Updated create-xmcp-app version to $VERSION"

          # Update init-xmcp package version
          cd ../init-xmcp
          npm version "$VERSION" --no-git-tag-version
          echo "✅ Updated init-xmcp version to $VERSION"

      - name: Publish xmcp package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd packages/xmcp
          echo "Publishing xmcp package with tag: ${{ steps.npm_tag.outputs.tag }}"
          npm publish --access public --tag ${{ steps.npm_tag.outputs.tag }}
          echo "✅ Successfully published xmcp@${{ steps.version.outputs.version }} with tag ${{ steps.npm_tag.outputs.tag }}"

      - name: Publish create-xmcp-app package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd packages/create-xmcp-app
          echo "Publishing create-xmcp-app package with tag: ${{ steps.npm_tag.outputs.tag }}"
          npm publish --access public --tag ${{ steps.npm_tag.outputs.tag }}
          echo "✅ Successfully published create-xmcp-app@${{ steps.version.outputs.version }} with tag ${{ steps.npm_tag.outputs.tag }}"

      - name: Publish init-xmcp package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd packages/init-xmcp
          echo "Publishing init-xmcp package with tag: ${{ steps.npm_tag.outputs.tag }}"
          npm publish --access public --tag ${{ steps.npm_tag.outputs.tag }}
          echo "✅ Successfully published init-xmcp@${{ steps.version.outputs.version }} with tag ${{ steps.npm_tag.outputs.tag }}"

      - name: Create publish summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 📦 NPM Publish Summary

          Release \`${{ github.event.release.tag_name }}\` (npm tag: \`${{ steps.npm_tag.outputs.tag }}\`):

          - **xmcp@${{ steps.version.outputs.version }}** - [View on NPM](https://www.npmjs.com/package/xmcp)
          - **create-xmcp-app@${{ steps.version.outputs.version }}** - [View on NPM](https://www.npmjs.com/package/create-xmcp-app)
          - **init-xmcp@${{ steps.version.outputs.version }}** - [View on NPM](https://www.npmjs.com/package/init-xmcp)

          ${{ github.event.release.prerelease && '⚠️ This is a pre-release. Install with `npm install xmcp@' || '✅ This is a stable release. Install with `npm install xmcp` or `npm install xmcp@' }}${{ steps.npm_tag.outputs.tag }}${{ github.event.release.prerelease && '`' || '`' }}
          EOF
