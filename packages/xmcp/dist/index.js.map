{"version":3,"file":"index.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;;;;ACTuB;AACY;AAEnC,MAAME,aAAaD,kDAAaA,CAAC,0FAAe;AAChD,MAAMG,YAAYJ,mDAAY,CAACE;AAExB,SAASI,iBAAiBC,IAAkC;IACjE,OAAO;QACLA;QACAC,OAAO;YACLC,OAAOT,gDAAS,CAACI,WAAW,OAAO;YACnCO,KAAKX,gDAAS,CAACI,WAAW,OAAO;QACnC;IACF;AACF;;;;;;;;;;;ACfA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACN6D;AAMtD,eAAeQ,QAAQ,EAAEL,IAAI,EAAkB;IACpD,MAAMM,SAASP,2EAAgBA,CAACC;AAClC","sources":["webpack://xmcp/webpack/universalModuleDefinition","webpack://xmcp/./src/utils/get-webpack-config.ts","webpack://xmcp/external node-commonjs \"path\"","webpack://xmcp/external node-commonjs \"url\"","webpack://xmcp/webpack/bootstrap","webpack://xmcp/webpack/runtime/compat get default export","webpack://xmcp/webpack/runtime/define property getters","webpack://xmcp/webpack/runtime/hasOwnProperty shorthand","webpack://xmcp/webpack/runtime/make namespace object","webpack://xmcp/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, () => {\nreturn ","import { Configuration } from \"webpack\"\nimport path from \"path\"\nimport { fileURLToPath } from \"url\"\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = path.dirname(__filename)\n\nexport function getWebpackConfig(mode: \"development\" | \"production\"): Configuration {\n  return {\n    mode,\n    entry: {\n      index: path.join(__dirname, \"src\", \"index.ts\"),\n      cli: path.join(__dirname, \"src\", \"cli.ts\")\n    }\n  }\n}","module.exports = require(\"path\");","module.exports = require(\"url\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { getWebpackConfig } from \"./utils/get-webpack-config\"\n\nexport interface CompileOptions {\n  mode: \"development\" | \"production\",\n}\n\nexport async function compile({ mode }: CompileOptions) {\n  const config = getWebpackConfig(mode)\n}"],"names":["path","fileURLToPath","__filename","url","__dirname","dirname","getWebpackConfig","mode","entry","index","join","cli","compile","config"],"sourceRoot":""}